# Twitter API Follow(ing) Matrix Producer (comma delimited) # Jzbm # May 20, 2013
# Comments wherever there are things you need to change specific to your needs
# Copy/paste the output into excel, using text import wizard or text-to-columns to delimit by commas

import twitter
import csv
from time import sleep
import cPickle as pickle

usersHeader = '<<<<yourcolumnheader>>>>' # whatever column header you have, where the usernames are
filename = '<<<<yourfilename>>>>.csv' # filename

twitterFile = csv.reader(open(filename, 'r'))

line1 = twitterFile.next()

usersColumn = line1.index(usersHeader)

userList = []

for row in twitterFile:
    currentUser = row[usersColumn].strip()
    userList.append(currentUser)

api = twitter.Api(consumer_key='<<<<>>>>>', consumer_secret='<<<<<>>>>>>', access_token_key='<<<<<<>>>>>>>', access_token_secret='<<<<<<>>>>>>')
# use your own consumer_key, secret, access_token & secret

def rate_monitor():
    try:
        hitsLeft = api.GetRateLimitStatus()
        hitsLeft = hitsLeft['remaining_hits']
        if hitsLeft < 10:
            print hitsLeft
            print 'waiting'
            sleep(3660)
        else:
            print hitsLeft
    except:
        print 'BadStatusLine'


mutualities = {}

for n in userList:
    mutualities[n] = []
    print n
    rate_monitor()
    try:
        friends = api.GetFriends(user=n)
    except twitter.TwitterError:
        mutualities[n].append('PDNE or Locked')
        print 'Page Does Not Exist or Locked'
        continue
    for f in friends:
       #rate_monitor()
       #take this rate_monitor() call out if you need extra speed, and are confident that you won't run over Twitter's call limit 
        friendName = f.screen_name
        print friendName
        if friendName in userList:
            friendName = str(friendName)
            if n in mutualities:
                mutualities[n].append(friendName)
            else:
                mutualities[n] = [friendName]
    pickle.dump(mutualities, open("C:\<<<Users?>>>\<<<someUser>>>\<<<Documents?>>>\<<<FolderForPickles?>>>\<<<yourpicklename>>>.p", "wb"))    
    # pickle to an appropriate path; useful if your code gets interrupted, you can pick up where you left off by loading the pickle at the start
    
######### If you want a matrix with invalid/locked users, but N/A in their appropriate columns, just remove this bit of code
for people in mutualities:
    if mutualities[people] == ['PDNE or Locked'] and people in userList:
        userList.remove(people)        
######### 

print 'Being Followed,',
for user in userList:
    print user+',',
print ''

for a in userList:
    if a in mutualities:
        print a+',',
        for y in userList:
            if mutualities[a] == ['PDNE or Locked']:
                print 'N/A,',
            else:
                    
                if a == y:
                    print '0,',
                elif y in mutualities[a]:
                    print '1,',
                elif y not in mutualities[a]:
                    print '0,',
        print ''

print ''

print 'Follow,',
for user in userList:
    print user+',',
print ''

for a in userList:
    if a in mutualities:
        print a+',',
        for y in userList:
             if mutualities[y] == ['PDNE or Locked']:
                print 'N/A,',
             else:
                if a == y:
                    print '0,',
                elif a in mutualities[y]:
                    print '1,',
                elif a not in mutualities[y]:
                    print '0,',
        print ''

print ''

print 'Mutual,',
for user in userList:
    print user+',',
print ''

for a in userList:
    if a in mutualities:
        print a+',',
        for y in userList:
            if mutualities[a] == ['PDNE or Locked']:
                print 'N/A,',
            else:
                if mutualities[y] == ['PDNE or Locked']:
                    print 'N/A,',
                else:
                    if a == y:
                        print '0,',
                    elif y in mutualities[a]:
                        if a in mutualities[y]:
                            print '1,',
                        else:
                            print '0,',
                    elif y not in mutualities[a]:
                        print '0,',
        print ''
